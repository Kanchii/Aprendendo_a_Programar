#include <iostream>
#include <cmath>
#include <queue>
#include <vector>
#include <map>
#include <cctype>
#include <iomanip>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <string.h>
#include <stack>
#include <list>
#include <algorithm>
#include <utility>

using namespace std;

#define INF 0x3f3f3f3f
#define MAX 10500
#define ALPHABETIC_SIZE 55
#define min(a,b) ((a) < (b) ? (a) : (b))
#define max(a,b) ((a) > (b) ? (a) : (b))
#define mp(a,b) (make_pair(a,b))

typedef unsigned long long int ull;
typedef long long int ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pii> vpii;
typedef vector<vpii> vvpii;



struct node {
	bool isEnd;
	int prefixCount;
	node* child[ALPHABETIC_SIZE];
};

node* root = NULL;

void init(node* &nd){
	nd = new node();
	nd -> isEnd = false;
	nd -> prefixCount = 0;
	for(int i = 0; i < ALPHABETIC_SIZE; i++){
		nd -> child[i] = NULL;
	}
}

void insertWord(string word){
	node* current = root;
	current -> prefixCount++;
	for(unsigned int i = 0; i < word.size(); i++){
		int letter = (int)word[i] - (int)'a';
		if(current -> child[letter] == NULL){
			init(current -> child[letter]);
		}		
		current -> child[letter] -> prefixCount++;
		current = current -> child[letter];		
	}
	current -> isEnd = true;
}

bool searchWord(string word){
	node* current = root;
	for(unsigned int i = 0; i < word.size(); i++){
		int letter = word[i] - 'a';
		if(current -> child[letter] == NULL){
			return false;
		}		
		current = current -> child[letter];
	}
	return current -> isEnd;
}

int quantPrefix(string prefix){
	node* current = root;
	for(unsigned int i = 0; i < prefix.size(); i++){
		int letter = prefix[i] - 'a';
		if(current -> child[letter] == NULL){
			return 0;
		}		
		current = current -> child[letter];
	}
	return current -> prefixCount;
}


int main(int argc, char const *argv[]){
	init(root);
	insertWord("felipe");
	insertWord("weiss");
	insertWord("fel");
	insertWord("banana");
	insertWord("teste");
	insertWord("balacubaco");
	insertWord("ipe");

	cout << searchWord("felipe") << endl;
	cout << searchWord("felip") << endl;
	cout << searchWord("teste") << endl;
	cout << searchWord("ipe") << endl;
	cout << searchWord("bananaa") << endl;

	cout << quantPrefix("f") << endl;
	cout << quantPrefix("a") << endl;
	cout << quantPrefix("t") << endl;
	cout << quantPrefix("ba") << endl;
	cout << quantPrefix("fel") << endl;

	return 0;
}
