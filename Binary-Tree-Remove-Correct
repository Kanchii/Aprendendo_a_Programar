#include <iomanip>
#include <iostream>
#include <vector>
#include <cmath>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <stack>
#include <set>
#include <algorithm>
#include <numeric>
#include <string>
#include <cstring>
#include <queue>
#include <list>
#include <utility>

#define INF 100000000

using namespace std;

struct node {
    int value;
    node *left;
    node *right;
};

node *root = NULL;

bool aux = true;

void insertNode(int key, node* &root){
    if(key < root -> value){
        if(root -> left == NULL){
            root -> left = new node;
            root -> left -> value = key;
            root -> left -> left = NULL;
            root -> left -> right = NULL;
        } else {
            insertNode(key, root -> left);
        }
    } else {
        if(root -> right == NULL){
            root -> right = new node;
            root -> right -> value = key;
            root -> right -> left = NULL;
            root -> right -> right = NULL;
        } else {
            insertNode(key, root -> right);
        }
    }
}

bool searchNode(int key, node *root){
    if(root == NULL){
        return false;
    }
    if(root -> value == key){
        return true;
    } else {
        if(key < root -> value){
            if(root -> left == NULL){
                return false;
            } else {
                if(searchNode(key, root -> left)){
                    return true;
                }
            }
        } else {
            if(root -> right == NULL){
                return false;
            } else {
                if(searchNode(key, root -> right)){
                    return true;
                }
            }
        }
    }

    return false;

}

void arvorePre(node *root){
    if(root != NULL){
        if(aux){
            printf("%d", root -> value);
            aux = false;
        } else {
            printf(" %d", root -> value);
        }
        arvorePre(root -> left);
        arvorePre(root -> right);
    }
}

void arvorePos(node *root){
    if(root != NULL){
        arvorePos(root -> left);
        arvorePos(root -> right);
        if(aux){
            printf("%d", root -> value);
            aux = false;
        } else {
            printf(" %d", root -> value);
        }
    }
}

void arvoreIn(node *root){
    if(root != NULL){
        arvoreIn(root -> left);
        if(aux){
            printf("%d", root -> value);
            aux = false;
        } else {
            printf(" %d", root -> value);
        }
        arvoreIn(root -> right);
    }
}

void arvoreNivel(node *root){
    queue<node*> fila;
    fila.push(root);

    while(!fila.empty()){
        node* aux = fila.front();
        fila.pop();
        cout << aux -> value << " ";
        if(aux -> left != NULL){
            fila.push(aux -> left);
        }
        if(aux -> right != NULL){
            fila.push(aux -> right);
        }
    }
}

node* removeNode(node* &root){
    node* new_node;
    node* aux;

    if(root -> left == NULL){
        new_node = root -> right;
        free(root);
        return new_node;
    } else {
        aux = root;
        new_node = root -> left;
        while(new_node -> right != NULL){
            aux = new_node;
            new_node = new_node -> right;
        }
        if(aux != root){
            aux -> right = new_node -> left;
            new_node -> left = root -> left;
        }
        new_node -> right = root -> right;
        free(root);
    }

    return new_node;
}

void foundNode(int key, node* &root){
    if(root -> value == key){
        node* aux = new node;
        aux = removeNode(root);
        root = aux;
    } else {
        if(key < root -> value){
            if(root -> left != NULL){
                if(root -> left -> value == key){
                    root -> left = removeNode(root -> left);
                } else {
                    foundNode(key, root -> left);
                }
            }
        } else {
            if(root -> right != NULL){
                if(root -> right -> value == key){
                    root -> right = removeNode(root -> right);
                } else {
                    foundNode(key, root -> right);
                }
            }
        }
    }
}

int main(){
    
    /*Algoritmo funcionando com remoção do nodo funcionando certinho, inserção e apresentação também*/


    return 0;
}
