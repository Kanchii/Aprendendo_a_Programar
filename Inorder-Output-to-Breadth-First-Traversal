#include <bits/stdc++.h>

using namespace std;

typedef unsigned long long int ull;
typedef unsigned int ui;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<vii> vvii;

#define INF 0x3f3f3f3f
#define WHITE 0
#define GRAY 1
#define BLACK 2
#define PI 3.14159265
#define EPS 1e-9
#define MOD 1000000007
#define MAX 100100
#define ALPHABETIC_SIZE 30

//Percorre a arvore por nivel usando uma BFS
void solve(string a){
    queue<ii> fila;
    fila.push(make_pair(0, a.size())); //Coloca na fila o range que estamos tratando
    while(!fila.empty()){
        ii daVez = fila.front();
        fila.pop();
        int mid = (daVez.first + daVez.second) / 2; //Pega a metade do range
        if(mid < a.size() and daVez.first <= daVez.second and a[mid] != '\''){ //Verifica se pode printar o char que esta
            cout << a[mid];                                                    //na posição mid
        }
        if(mid < a.size() and daVez.first < daVez.second){ //Verifica se deve por na fila os "filhos" do nodo atual
            fila.push(ii(daVez.first, mid - 1));
            fila.push(ii(mid + 1, daVez.second));
        }
    }
    cout << endl;
}

int maxNivel; //Tamanho da arvore em altura
int k;        //Tamanho do output na forma inorder
int treeSize; //Total de nodos que a arvore tera

//Função que preenche o output inorder com um simbolo especial para deixar a arvore binaria completa
void buildString(string &a){
    int ultimaCamada = (int)pow(2, maxNivel); //Numero de nodos na ultima camada da arvore
    int falta = treeSize - k;                 //Quantos nodos faltam acrescer a arvore ainda
    int cont = ultimaCamada - falta;          //Numero de nodos que já estão na ultima camada
  
    for(int i = 0; i < a.size(); i++){        //Percorre toda o output do inorder e vai acrescentando um simbolo
        if(i % 2 == 0){                       //especial a cada 2 posicões sempre que estiver faltando um nodo
            if(cont == 0){ //<- se ja acabou todos os nodos ja inseridos, acrescente um novo nodo
                a.insert(a.begin() + i, '\'');
            } else { //<- caso contrario apenas ignore
                cont--;
            }
        }
    }
}

int main(){
    while(cin >> k and k){ //Numero de caracteres que o output inorder tem
        getchar();
        string res;
        getline(cin, res);
        maxNivel = (int)floor(log2(k));
        treeSize = 2 * (int)pow(2, maxNivel) - 1;
        buildString(res); //Ajusta o output para que a arvore binaria esteja completa
        solve(res); //Printa a arvore por nivel

    }

    return 0;
}
